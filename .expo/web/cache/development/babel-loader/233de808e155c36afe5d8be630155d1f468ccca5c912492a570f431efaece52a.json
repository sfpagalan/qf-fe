{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar QuestForgeScreen = function QuestForgeScreen(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var character = route.params.character;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    story = _useState2[0],\n    setStory = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    options = _useState4[0],\n    setOptions = _useState4[1];\n  useEffect(function () {\n    fetchInitialStory(character);\n  }, [character]);\n  var fetchInitialStory = function () {\n    var _ref2 = _asyncToGenerator(function* (characterData) {\n      try {\n        var response = yield axios.post('/:storyId', {\n          character: characterData\n        });\n        setStory(response.data.story);\n        setOptions(response.data.options);\n      } catch (error) {\n        console.error('Error fetching story:', error);\n        setStory('An unexpected error occurred in your adventure...');\n      }\n    });\n    return function fetchInitialStory(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleOptionSelect = function () {\n    var _ref3 = _asyncToGenerator(function* (selectedOption) {\n      try {\n        var payload = {\n          character: character,\n          selectedOption: selectedOption\n        };\n        var response = yield axios.post('/:storyId/continue', payload);\n        var updatedStory = response.data.updatedStory;\n        var newOptions = response.data.newOptions;\n        setStory(function (prevStory) {\n          return prevStory + '\\n\\n' + updatedStory;\n        });\n        setOptions(newOptions);\n      } catch (error) {\n        console.error('Error processing option:', error);\n      }\n    });\n    return function handleOptionSelect(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsxs(ScrollView, {\n    contentContainerStyle: styles.container,\n    children: [_jsx(Text, {\n      style: styles.storyText,\n      children: story\n    }), options.map(function (option, index) {\n      return _jsx(TouchableOpacity, {\n        style: styles.optionButton,\n        onPress: function onPress() {\n          return handleOptionSelect(option);\n        },\n        children: _jsx(Text, {\n          style: styles.optionText,\n          children: option\n        })\n      }, index);\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  storyText: {\n    fontSize: 16,\n    marginBottom: 20\n  },\n  optionButton: {\n    backgroundColor: '#007bff',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10\n  },\n  optionText: {\n    color: 'white',\n    textAlign: 'center'\n  }\n});\nexport default QuestForgeScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","TouchableOpacity","StyleSheet","ScrollView","axios","jsx","_jsx","jsxs","_jsxs","QuestForgeScreen","_ref","route","navigation","character","params","_useState","_useState2","_slicedToArray","story","setStory","_useState3","_useState4","options","setOptions","fetchInitialStory","_ref2","_asyncToGenerator","characterData","response","post","data","error","console","_x","apply","arguments","handleOptionSelect","_ref3","selectedOption","payload","updatedStory","newOptions","prevStory","_x2","contentContainerStyle","styles","container","children","style","storyText","map","option","index","optionButton","onPress","optionText","create","flex","padding","alignItems","justifyContent","fontSize","marginBottom","backgroundColor","borderRadius","marginTop","color","textAlign"],"sources":["/Users/ryomazen/Documents/codefellows/projects/qf-fe/src/screens/QuestForgeScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';\nimport axios from 'axios'; // Assuming axios is used for API calls\n\nconst QuestForgeScreen = ({ route, navigation }) => {\n    const { character } = route.params;\n    const [story, setStory] = useState('');\n    const [options, setOptions] = useState([]);\n\n    // Fetch initial story and options\n    useEffect(() => {\n        fetchInitialStory(character);\n    }, [character]);\n\n    const fetchInitialStory = async (characterData) => {\n        try {\n            // Replace this URL with your API endpoint\n            const response = await axios.post('/:storyId', { character: characterData });\n            setStory(response.data.story);\n            setOptions(response.data.options);\n        } catch (error) {\n            console.error('Error fetching story:', error);\n            setStory('An unexpected error occurred in your adventure...');\n        }\n    };\n\n    const handleOptionSelect = async (selectedOption) => {\n        try {\n            // Construct the request payload. This structure depends on your backend/API expectation.\n            const payload = {\n                character: character, // Assuming 'character' is available in your component's scope\n                selectedOption: selectedOption\n            };\n    \n            // Replace this URL with your API endpoint\n            const response = await axios.post('/:storyId/continue', payload);\n    \n            // Assuming the response contains the next part of the story and new options\n            const updatedStory = response.data.updatedStory;\n            const newOptions = response.data.newOptions;\n    \n            // Update state with the new story segment and options\n            setStory(prevStory => prevStory + '\\n\\n' + updatedStory);\n            setOptions(newOptions);\n        } catch (error) {\n            console.error('Error processing option:', error);\n            // Handle the error (e.g., show an alert or a message to the user)\n        }\n    };\n    \n\n    return (\n        <ScrollView contentContainerStyle={styles.container}>\n            <Text style={styles.storyText}>{story}</Text>\n            {options.map((option, index) => (\n                <TouchableOpacity \n                    key={index} \n                    style={styles.optionButton} \n                    onPress={() => handleOptionSelect(option)}\n                >\n                    <Text style={styles.optionText}>{option}</Text>\n                </TouchableOpacity>\n            ))}\n        </ScrollView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        padding: 20,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    storyText: {\n        fontSize: 16,\n        marginBottom: 20,\n    },\n    optionButton: {\n        backgroundColor: '#007bff',\n        padding: 10,\n        borderRadius: 5,\n        marginTop: 10,\n    },\n    optionText: {\n        color: 'white',\n        textAlign: 'center',\n    },\n    // Additional styles\n});\n\nexport default QuestForgeScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}